    elif selection_predictor_method == 'correlation':
        # Matrix which will contain the correlation of each edge to behavior, and the corresponding
        # p values
        R_mat = np.zeros(patients_train_set.shape[1])
        P_mat = np.zeros(patients_train_set.shape[1])
        # Positive and negative mask initialisation
        negative_edges_mask = np.zeros(patients_train_set.shape[1])
        positive_edges_mask = np.zeros(patients_train_set.shape[1])

        for i in range(patients_train_set.shape[1]):
            # Simple correlation between each edges and behavior
            R_mat[i], P_mat[i] = stats.pearsonr(x=patients_train_set[:, i],
                                                y=training_set_behavioral_score)

        # Positive and Negative correlation indices, under the selection threshold
        negative_edges_indices = np.nonzero((R_mat < 0) & (P_mat < significance_selection_threshold))
        positives_edges_indices = np.nonzero((R_mat > 0) & (P_mat < significance_selection_threshold))

        # Fill the corresponding indices with 1 if indices exist, zero elsewhere
        negative_edges_mask[negative_edges_indices] = 1
        positive_edges_mask[positives_edges_indices] = 1

        # Get the sum off all edges in the mask
        negative_edges_summary_values = np.zeros(patients_train_set.shape[0])
        positive_edges_summary_values = np.zeros(patients_train_set.shape[0])

        for i in range(patients_train_set.shape[0]):
            negative_edges_summary_values[i] = np.sum(np.multiply(negative_edges_mask, patients_train_set[i, ...]))
            positive_edges_summary_values[i] = np.sum(np.multiply(positive_edges_mask, patients_train_set[i, ...]))

    elif selection_predictor_method == 'partial correlation':
        # Matrix which will contain the correlation of each edge to behavior, and the corresponding
        # p values
        R_mat = np.zeros(patients_train_set.shape[1])
        P_mat = np.zeros(patients_train_set.shape[1])

        # Positive and negative mask initialisation
        negative_edges_mask = np.zeros(patients_train_set.shape[1])
        positive_edges_mask = np.zeros(patients_train_set.shape[1])

        # Construct temporary array to contain the connectivity, behavior and
        # other variable to regress
        for i in range(patients_train_set.shape[1]):
            R_, P_ = partial_corr(np.c_[patients_train_set[:, i], training_set_behavioral_score,
                                  training_set_confounding_variables])
            R_mat[i] = R_[0, 1]
            P_mat[i] = P_[0, 1]

        # Positive and Negative correlation indices, under the selection threshold
        negative_edges_indices = np.nonzero((R_mat < 0) & (P_mat < significance_selection_threshold))
        positives_edges_indices = np.nonzero((R_mat > 0) & (P_mat < significance_selection_threshold))

        # Fill the corresponding indices with 1 if indices exist, zero elsewhere
        negative_edges_mask[negative_edges_indices] = 1
        positive_edges_mask[positives_edges_indices] = 1

        # Get the sum off all edges in the mask
        negative_edges_summary_values = np.zeros(patients_train_set.shape[0])
        positive_edges_summary_values = np.zeros(patients_train_set.shape[0])

        for i in range(patients_train_set.shape[0]):
            negative_edges_summary_values[i] = np.sum(np.multiply(negative_edges_mask, patients_train_set[i, ...]))
            positive_edges_summary_values[i] = np.sum(np.multiply(positive_edges_mask, patients_train_set[i, ...]))





from plotting import display
save_plot_directory = '/media/db242421/db242421_data/ConPagnon_data/CPM'
# Plot the negative and positive edges on a glass brain
with PdfPages(os.path.join(save_plot_directory, kind + '_LG_LesionSize_CPM_correlation_selelection_of_predictor.pdf')) \
        as pdf:
    # Plot regression line for both model

    # Plot for positive model
    plt.figure()
    g = sns.lmplot(x='true_behavioral_score', y='predicted_positive_model_scores', data=behavioral_scores_both_model,
                   fit_reg=False, hue='language profil', legend_out=True, legend=True)
    sns.regplot(x='true_behavioral_score', y='predicted_positive_model_scores', data=behavioral_scores_both_model,
                scatter=False, ax=g.axes[0, 0], line_kws={'color': 'firebrick'})
    plt.title('Predicted behavioral score versus true behavioral score \n in the positive edges model \n'
              'r = {}, p = {}'.format(R_predict_positive_model, P_predict_positive_model))
    pdf.savefig(bbox_inches='tight')
    plt.show()

    # Plot for negative model
    plt.figure()
    g = sns.lmplot(x='true_behavioral_score', y='predicted_negative_model_scores', data=behavioral_scores_both_model,
                   fit_reg=False, hue='language profil', legend_out=True, legend=True)
    sns.regplot(x='true_behavioral_score', y='predicted_negative_model_scores', data=behavioral_scores_both_model,
                scatter=False, ax=g.axes[0, 0], line_kws={'color': 'b'})
    plt.title('Predicted behavioral score versus true behavioral score \n in the negative edges model \n'
              'r = {}, p = {}'.format(R_predict_negative_model, P_predict_negative_model))
    pdf.savefig(bbox_inches='tight')
    plt.show()


    # plot glass brain for selected positive edges
    plt.figure()
    plot_connectome(adjacency_matrix=positive_edges_matrix, node_coords=atlas_nodes, node_color=labels_colors,
                    edge_cmap='Reds', title='Edges with positive correlation to language score')
    pdf.savefig(bbox_inches='tight')
    plt.show()

    # plot glass brain for selected negative edges
    plt.figure()
    plot_connectome(adjacency_matrix=negatives_edges_matrix, node_coords=atlas_nodes, node_color=labels_colors,
                    edge_cmap='Blues', title='Edges with negative correlation to language score')
    pdf.savefig(bbox_inches='tight')
    plt.show()

    # plot positive model matrix
    plt.figure()
    display.plot_matrix(matrix=positive_edges_matrix, labels_colors=labels_colors, mpart='all',
                        colormap='Reds', horizontal_labels=labels_regions, vertical_labels=labels_regions,
                        title='Edges with positive correlation to behavior', linecolor='black')
    pdf.savefig(bbox_inches='tight')
    plt.show()

    # plot negative model matrix
    plt.figure()
    display.plot_matrix(matrix=negatives_edges_matrix, labels_colors=labels_colors, mpart='all',
                        colormap='Blues', horizontal_labels=labels_regions, vertical_labels=labels_regions,
                        title='Edges with negative correlation to behavior', linecolor='black')
    pdf.savefig(bbox_inches='tight')
    plt.show()


    # For the positive edges model
    positive_edges_position = np.where(np.tril(positive_edges_matrix) == 1)
    number_of_couple_region = len(positive_edges_position[0])
    for n_couple in range(number_of_couple_region):
        # list of connectivity coefficient of the current couple accross patients
        rois_couple_connectivity = []
        for n_patient in range(patients_connectivity_matrices.shape[0]):
            rois_couple_connectivity.append(patients_connectivity_matrices[n_patient,
                                            positive_edges_position[0][n_couple],
                                            positive_edges_position[1][n_couple]])

        rois_couple_connectivity = np.array(rois_couple_connectivity)
        # Construct a pandas dataframe to plot with seaborn
        couple_connectivity_dataframe = pd.DataFrame(
            data={'{} - {}'.format(labels_regions[positive_edges_position[0][n_couple]],
                                   labels_regions[positive_edges_position[1][n_couple]]): rois_couple_connectivity,
                  'true behavioral score': np.array(behavioral_scores),
                  'language profil': regression_data_file['langage_clinique']
                  }, index=behavioral_scores.index)
        plt.figure()
        g = sns.lmplot(x='true behavioral score',
                       y='{} - {}'.format(labels_regions[positive_edges_position[0][n_couple]],
                                   labels_regions[positive_edges_position[1][n_couple]]),
                       data=couple_connectivity_dataframe,
                       fit_reg=False, hue='language profil', legend_out=True, legend=True)
        sns.regplot(x='true behavioral score',
                    y='{} - {}'.format(labels_regions[positive_edges_position[0][n_couple]],
                                   labels_regions[positive_edges_position[1][n_couple]]),
                    data=couple_connectivity_dataframe,
                    scatter=False, ax=g.axes[0, 0], line_kws={'color': 'firebrick'})
        pdf.savefig()
        plt.show()

    # For the negative edges model
    negative_edges_position = np.where(np.tril(negatives_edges_matrix) == 1)
    number_of_couple_region = len(negative_edges_position[0])
    for n_couple in range(number_of_couple_region):
        # list of connectivity coefficient of the current couple accross patients
        rois_couple_connectivity = []
        for n_patient in range(patients_connectivity_matrices.shape[0]):
            rois_couple_connectivity.append(patients_connectivity_matrices[n_patient,
                                                                           negative_edges_position[0][n_couple],
                                                                           negative_edges_position[1][n_couple]])

        rois_couple_connectivity = np.array(rois_couple_connectivity)
        # Construct a pandas dataframe to plot with seaborn
        couple_connectivity_dataframe = pd.DataFrame(
            data={'{} - {}'.format(labels_regions[negative_edges_position[0][n_couple]],
                                   labels_regions[negative_edges_position[1][n_couple]]): rois_couple_connectivity,
                  'true behavioral score': np.array(behavioral_scores),
                  'language profil': regression_data_file['langage_clinique']
                  }, index=behavioral_scores.index)
        plt.figure()
        g = sns.lmplot(x='true behavioral score',
                       y='{} - {}'.format(labels_regions[negative_edges_position[0][n_couple]],
                                          labels_regions[negative_edges_position[1][n_couple]]),
                       data=couple_connectivity_dataframe,
                       fit_reg=False, hue='language profil', legend_out=True, legend=True)
        sns.regplot(x='true behavioral score',
                    y='{} - {}'.format(labels_regions[negative_edges_position[0][n_couple]],
                                       labels_regions[negative_edges_position[1][n_couple]]),
                    data=couple_connectivity_dataframe,
                    scatter=False, ax=g.axes[0, 0], line_kws={'color': 'b'})
        pdf.savefig()
        plt.show()





# Plot relationship between predicted and true value by the model
# Add predicted score for negative and positive edges model
behavioral_scores_both_model = pd.DataFrame(data={'true_behavioral_score':np.array(behavioral_scores) ,
                                                  'predicted_positive_model_scores': behavior_prediction_positive_edges,
                                                  'predicted_negative_model_scores': behavior_prediction_negative_edges,
                                                  'language profil': regression_data_file['langage_clinique']},
                                            index=behavioral_scores.index)
plt.figure()
g = sns.lmplot(x='true_behavioral_score', y='predicted_positive_model_scores', data=behavioral_scores_both_model,
               fit_reg=False, hue='language profil', legend_out=True, legend=True)
sns.regplot(x='true_behavioral_score', y='predicted_positive_model_scores', data=behavioral_scores_both_model,
            scatter=False, ax=g.axes[0, 0], line_kws={'color': 'firebrick'})
plt.title('Predicted behavioral score versus true behavioral score \n in the positive edges model \n'
          'r = {}, p = {}'.format(R_predict_positive_model, P_predict_positive_model))
plt.show()

# Plot for negative model
plt.figure()
g = sns.lmplot(x='true_behavioral_score', y='predicted_negative_model_scores', data=behavioral_scores_both_model,
               fit_reg=False, hue='language profil', legend_out=True, legend=True)
sns.regplot(x='true_behavioral_score', y='predicted_negative_model_scores', data=behavioral_scores_both_model,
            scatter=False, ax=g.axes[0, 0], line_kws={'color': 'b'})
plt.title('Predicted behavioral score versus true behavioral score \n in the negative edges model \n'
          'r = {}, p = {}'.format(R_predict_negative_model, P_predict_negative_model))
plt.show()
